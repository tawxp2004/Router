export default async function handler(req, res) {
  // âœ… Ø¥Ø¹Ø¯Ø§Ø¯ ØªØ±ÙˆÙŠØ³Ø§Øª CORS Ù„Ù„Ø³Ù…Ø§Ø­ Ø¨Ø·Ù„Ø¨Ø§Øª Ù…Ù† Ø¬Ù…ÙŠØ¹ Ø§Ù„Ù†Ø·Ø§Ù‚Ø§Øª
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // âœ… Ø§Ù„ØªØ¹Ø§Ù…Ù„ Ù…Ø¹ Ø·Ù„Ø¨Ø§Øª Preflight Ø§Ù„Ø®Ø§ØµØ© Ø¨Ù€ OPTIONS
  if (req.method === "OPTIONS") {
    res.status(200).end();
    return;
  }

  try {
    // âœ… Ø§Ø³ØªØ®Ø±Ø§Ø¬ Ø§Ù„Ø±Ø³Ø§Ù„Ø© Ù…Ù† Ø¬Ø³Ù… Ø§Ù„Ø·Ù„Ø¨
    const { message } = req.body;

    if (!message) {
      res.status(400).send("No message provided");
      return;
    }

    // âœ… Ø¥Ø±Ø³Ø§Ù„ Ø§Ù„Ø·Ù„Ø¨ Ø¥Ù„Ù‰ OpenRouter Ø¨Ø§Ø³ØªØ®Ø¯Ø§Ù… Ù†Ù…ÙˆØ°Ø¬ Mistral
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": "https://yourapp.com", // Ø§Ø®ØªÙŠØ§Ø±ÙŠ Ø­Ø³Ø¨ Ø³ÙŠØ§Ø³Ø© OpenRouter
        "X-Title": "Your App Title"            // Ø§Ø®ØªÙŠØ§Ø±ÙŠ Ø­Ø³Ø¨ Ø³ÙŠØ§Ø³Ø© OpenRouter
      },
      body: JSON.stringify({
        model: "mistralai/mistral-7b-instruct:free", // âœ… Ù†Ù…ÙˆØ°Ø¬ Ù…Ø¬Ø§Ù†ÙŠ Ù…Ù† Ø´Ø±ÙƒØ© Mistral
        messages: [
          {
            role: "system",
            content: "You are a friendly AI skilled in contextual marketing.

Start with a short, curiosity-driven question (max 8 words). Don't assume anything about the visitor.

If the user shows any interest in online safety, suggest a smart VPN as a helpful discovery â€” not a sales pitch.

Use emojis naturally. Connect unrelated topics (like music or sports) to the value of privacy.

When offering the app, use this format:
ðŸ‘‰ [Click here to try the app](https://your-offer-link.com)

Never explain your role. Just reply as if chatting.
"
          },
          {
            role: "user",
            content: message
          }
        ]
      })
    });

    // âœ… Ø§Ù„ØªØ­Ù‚Ù‚ Ù…Ù† Ø­Ø§Ù„Ø© Ø§Ù„Ø§Ø³ØªØ¬Ø§Ø¨Ø©
    if (!response.ok) {
      throw new Error(`OpenRouter returned status ${response.status}`);
    }

    const data = await response.json();
    console.log("OpenRouter Response:", JSON.stringify(data));

    // âœ… Ø§Ù„ØªØ­Ù‚Ù‚ Ù…Ù† ØµØ­Ø© Ø§Ù„Ø±Ø¯
    if (!data.choices || !data.choices[0]) {
      res.status(500).send("Invalid response from OpenRouter");
      return;
    }

    const replyContent = data.choices[0].message.content?.trim();

    if (!replyContent) {
      res.status(500).send("Empty reply from model");
      return;
    }

    // âœ… Ø¥Ø±Ø³Ø§Ù„ Ø§Ù„Ø±Ø¯ Ø¥Ù„Ù‰ Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù… ÙƒÙ†Øµ Ø®Ø§Ù… Ø¨Ø¯ÙˆÙ† JSON
    res.status(200).send(replyContent);

  } catch (error) {
    // âœ… Ø§Ù„ØªÙ‚Ø§Ø· Ø£ÙŠ Ø®Ø·Ø£ ÙˆØ¥Ø±Ø¬Ø§Ø¹ Ø±Ø³Ø§Ù„Ø© Ø®Ø·Ø£ Ù†ØµÙŠØ©
    console.error("API error:", error);
    res.status(500).send("Internal Server Error");
  }
}
